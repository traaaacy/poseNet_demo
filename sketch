
let video;
let poseNet;
let poses = [];

let centerX = 0.0, centerY = 0.0;

let radius = 45, rotAngle = -90;
let accelX = 0.0, accelY = 0.0;
let deltaX = 0.0, deltaY = 0.0;
let springing = 0.0009, damping = 0.98;
let nodes = 5;

let nodeStartX = [];
let nodeStartY = [];
let nodeX = [];
let nodeY = [];
let angle = [];
let frequency = [];
let organicConstant = 1.0;

function setup() {
  createCanvas(640, 480);
  video = createCapture(VIDEO);
  video.size(width, height);
  
    centerX = width / 2;
  centerY = height / 2;
  
    for (let i = 0; i < nodes; i++){
    nodeStartX[i] = 0;
    nodeStartY[i] = 0;
    nodeY[i] = 0;
    nodeY[i] = 0;
    angle[i] = 0;
  }
  
    for (let i = 0; i < nodes; i++){
    frequency[i] = random(5, 12);
  }

  noStroke();
  frameRate(30);

  // Create a new poseNet method with a single detection
  poseNet = ml5.poseNet(video, modelReady);
  // This sets up an event that fills the global variable "poses"
  // with an array every time new poses are detected
  poseNet.on('pose', function(results) {
    poses = results;
  });

  video.hide();
}



function modelReady() {
  select('#status').html('Model Loaded');
}

function draw() {
  image(video, 0, 0, -width, height);

  // We can call both functions to draw all keypoints and the skeletons
  //drawKeypoints();
  //drawSkeleton();
   fill(0, 100);
  rect(0, 0, width, height);
  drawShape();
  //moveShape();
  drawKeypoints();
}

function drawShape() {
  //  calculate node  starting locations
  for (let i = 0; i < nodes; i++){
    nodeStartX[i] = centerX + cos(radians(rotAngle)) * radius;
    nodeStartY[i] = centerY + sin(radians(rotAngle)) * radius;
    rotAngle += 360.0 / nodes;
  }

  // draw polygon
  curveTightness(organicConstant);
  fill(255);
  beginShape();
  for (let i = 0; i < nodes; i++){
    curveVertex(nodeX[i], nodeY[i]);
  }
  for (let i = 0; i < nodes-1; i++){
    curveVertex(nodeX[i], nodeY[i]);
  }
  endShape(CLOSE);
}
// A function to draw ellipses over the detected keypoints

function drawKeypoints() {
  // Ensure poses array is not empty
  if (poses.length > 0) {
    // Move center point
    deltaX = centerX - poses[0].pose.keypoints[0].position.x;
    deltaY = centerY - poses[0].pose.keypoints[0].position.y;

    // Create springing effect
    deltaX *= springing;
    deltaY *= springing;
    accelX += deltaX;
    accelY += deltaY;

    // Move predator's center
    centerX -= accelX;
    centerY -= accelY;

    // Slow down springing
    accelX *= damping;
    accelY *= damping;

    // Change curve tightness
    organicConstant = 1 - ((abs(accelX) + abs(accelY)) * 0.1);

    // Move nodes
    for (let i = 0; i < nodes; i++) {
      nodeX[i] = nodeStartX[i] + sin(radians(angle[i])) * (accelX * 2);
      nodeY[i] = nodeStartY[i] + sin(radians(angle[i])) * (accelY * 2);
      angle[i] += frequency[i];
    }

    // Loop through all the poses detected
    for (let i = 0; i < poses.length; i++) {
      // For each pose detected, loop through all the keypoints
      let pose = poses[i].pose;
      for (let j = 0; j < pose.keypoints.length; j++) {
        // A keypoint is an object describing a body part (like rightArm or leftShoulder)
        let keypoint = pose.keypoints[j];
        // Only draw an ellipse if the pose probability is bigger than 0.2
        if (keypoint.score > 0.2) {
          fill(255, 0, 0);
          noStroke();
         // ellipse(keypoint.position.x, keypoint.position.y, 10, 10);
        }
      }
    }
  }
}



// A function to draw the skeletons
function drawSkeleton() {
  // Loop through all the skeletons detected
  for (let i = 0; i < poses.length; i++) {
    let skeleton = poses[i].skeleton;
    // For every skeleton, loop through all body connections
    for (let j = 0; j < skeleton.length; j++) {
      let partA = skeleton[j][0];
      let partB = skeleton[j][1];
      stroke(255, 0, 0);
      line(partA.position.x, partA.position.y, partB.position.x, partB.position.y);
    }
  }
}

